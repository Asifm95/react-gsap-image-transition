{"version":3,"sources":["darthvader.webp","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","App","image","useRef","container","titleContainer","imgReveal","title","tl","gsap","timeline","useEffect","current","to","duration","css","visibility","width","ease","from","scale","delay","scaleX","y","className","ref","src","vader","alt","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4HAAAA,EAAOC,QAAU,IAA0B,yC,iLCmE5BC,G,MA9DO,WACpB,IAAIC,EAAQC,iBAAgC,MACxCC,EAAYD,iBAA8B,MAC1CE,EAAiBF,iBAA8B,MAC/CG,EAAYH,iBAA8B,MAC1CI,EAAQJ,iBAA8B,MACtCK,EAAKC,IAAKC,WAqCd,OApCAC,qBAAU,WAENP,EAAUQ,SACVV,EAAMU,SACNN,EAAUM,SACVL,EAAMK,SACNP,EAAeO,SAEfJ,EAAGK,GAAGT,EAAUQ,QAAS,CAAEE,SAAU,EAAGC,IAAK,CAAEC,WAAY,aACxDH,GAAGP,EAAUM,QAAS,CACrBE,SAAU,IACVG,MAAO,KACPC,KAAM,qBAEPC,KAAKjB,EAAMU,QAAS,CACnBE,SAAU,IACVM,MAAO,IACPF,KAAM,gBACNG,OAAQ,MAETF,KACCd,EAAeO,QACf,CACEE,SAAU,IACVQ,OAAQ,EACRJ,KAAM,eAER,SAEDC,KAAKZ,EAAMK,QAAS,CACnBE,SAAU,IACVS,EAAG,GACHL,KAAM,mBAKZ,6BAASM,UAAU,OAAOC,IAAKrB,GAC7B,yBAAKoB,UAAU,kBAAkBC,IAAKpB,GACpC,uBAAGmB,UAAU,QAAQC,IAAKlB,GAA1B,6BAIF,yBAAKiB,UAAU,aACb,6BACE,yBAAKA,UAAU,iBACb,yBAAKC,IAAKvB,EAAOwB,IAAKC,IAAOC,IAAI,uBACjC,yBAAKJ,UAAU,cAAcC,IAAKnB,UC/C1BuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.10b0bca2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/darthvader.dd768f74.webp\";","import React, { useRef, useEffect } from 'react';\nimport vader from './darthvader.webp';\nimport gsap from 'gsap';\nimport './App.scss';\n\nconst App: React.FC = () => {\n  let image = useRef<HTMLImageElement | null>(null);\n  let container = useRef<HTMLDivElement | null>(null);\n  let titleContainer = useRef<HTMLDivElement | null>(null);\n  let imgReveal = useRef<HTMLDivElement | null>(null);\n  let title = useRef<HTMLDivElement | null>(null);\n  let tl = gsap.timeline();\n  useEffect(() => {\n    if (\n      container.current &&\n      image.current &&\n      imgReveal.current &&\n      title.current &&\n      titleContainer.current\n    ) {\n      tl.to(container.current, { duration: 0, css: { visibility: 'visible' } })\n        .to(imgReveal.current, {\n          duration: 1.3,\n          width: '0%',\n          ease: 'Power2.easeInOut'\n        })\n        .from(image.current, {\n          duration: 1.2,\n          scale: 1.6,\n          ease: 'Power2.easeIn',\n          delay: -1.3\n        })\n        .from(\n          titleContainer.current,\n          {\n            duration: 1.1,\n            scaleX: 0,\n            ease: 'back.out(1)'\n          },\n          '-=0.2'\n        )\n        .from(title.current, {\n          duration: 1.2,\n          y: 50,\n          ease: 'back.out(1)'\n        });\n    }\n  });\n  return (\n    <section className=\"main\" ref={container}>\n      <div className=\"title-container\" ref={titleContainer}>\n        <p className=\"title\" ref={title}>\n          WELCOME TO THE DARK SIDE\n        </p>\n      </div>\n      <div className=\"container\">\n        <div>\n          <div className=\"img-container\">\n            <img ref={image} src={vader} alt=\"vader in the house\" />\n            <div className=\"img-overlay\" ref={imgReveal}></div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}